
#include <stdlib.h>
#include <stdio.h>

#include "ecos.h"
#include "problem.h"

{% if do_timing -%}
#include <time.h>
{% endif %}

pwork* solver_work;

int solution()
{

    gather_matrices();

    solver_work = ECOS_setup(
             {{ n }},  // number of vars
             {{ m }},  // number of inequality constrs
             {{ p }},  // p is number of equality constrs

             // l is positive orthant dimension
             // the first l elements of s are >= 0
             // in Gx + s = h
             {{ dims['l'] }},
             // len(q), number of cones
             {{ dims['q'] | length}},
             q,    // dimension of each cone
             0,    // number of exponential cones (UNSUPPORTED)
             Gpr,  // G coeffs  (CCS)
             Gjc,  // col_idx   (CCS)
             Gir,  // row_ptr   (CCS)
             {% if p!=0 %}Apr{% else %}0{% endif %},  // A coeffs  (CCS)
             {% if p!=0 %}Ajc{% else %}0{% endif %},  // col_idx   (CCS)
             {% if p!=0 %}Air{% else %}0{% endif %},  // row_ptr   (CCS)
             c,   // obj coeffs
             h,  // Gx cone offsets
             {% if p!=0 %}b{% else %}0{% endif %}  // Ax offsets
    );

    if (solver_work != NULL){
        printf("About to solve \n");
    } else {
        printf("About to solve, but solver work is NULL \n");
    }


    return (int) ECOS_solve(solver_work);
}

void solution_cleanup(){
    ECOS_cleanup(solver_work, 0);
}

int main(){

    {% if do_timing -%}
    clock_t start = clock(), diff;
    {% endif %}

    // Below is for testing
    {% for name, p in parms.items() %}{% if p.index != None %}
    {{name}} = 42;{% endif %}{% endfor %}

    int exit_code = solution();

    {% if do_timing -%}
    diff = clock() - start;
    double milliseconds = (float) diff * 1000 / CLOCKS_PER_SEC;
    printf("%d solution in %f milliseconds \n", exit_code, milliseconds);
    {%- endif %}

    printf("Solution was:\n");

    {% for name, x in vars.items() %}
    printf(" {{name}} : %f \n", solver_work->x[{{loop.index-1}}]);{% endfor %}

    solution_cleanup();

}
